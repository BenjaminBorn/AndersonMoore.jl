module BuildATests

# test buildA 
import AMAFUNCS.buildA!

# test buildA! firmvalue example
function firmvalue()::Bool


neq=4::Int64;nlag=1::Int64;nlead=1::Int64
qRows=(neq*nlead)::Int64;qCols=(neq*(nlag+nlead))::Int64


qq=zeros(Float64,4,8)

hForA=[0.  0.  0.  0.  -1.1  0.  0.  0.  1.  1.  0.  0.;
0.  0.  0.  0.  0.  -0.4  0.  0.  0.  1.  -1.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.;
0.  0.  0.  0.  0.  0.  0.  -1.  0.  0.  0.  1.]::Array{Float64,2}

aa=[1.1  -0.4  0.;
0.  0.4  0.;
0.  0.  1.]::Array{Float64,2}

ia=3::Int64

js=[5.  6.  8.]::Array{Float64,2}

(aaJulia,iaJulia,jsJulia)=buildA!(hForA,qCols,neq)
#isapprox(aaJulia,aa,rtol=0.1e-16::Float64,atol=0.0::Float64) &&
#isapprox(iaJulia,ia,rtol=0.1e-16::Float64,atol=0.0::Float64)&&
#isapprox(jsJulia,js,rtol=0.1e-16::Float64,atol=0.0::Float64)
2==3
end;

# test buildA! firmvalue3Leads2Lags example
function firmvalue3Leads2Lags()::Bool


neq=4::Int64;nlag=2::Int64;nlead=3::Int64
qRows=(neq*nlead)::Int64;qCols=(neq*(nlag+nlead))::Int64


qq=zeros(Float64,12,20)

hForA=[0.  0.  0.  0.  0.  0.  0.  0.  -1.331  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -0.4  0.  0.  0.  0.  0.  0.  0.  1.  -1.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -1.  0.  0.  0.  1.]::Array{Float64,2}

aa=[0.  1.  0.  0.  0.  0.;
0.  0.  0.  1.  0.  0.;
0.  0.  0.  0.  1.  0.;
1.331  0.  -1.  0.  0.  0.;
0.  0.  0.4  0.  0.  0.;
0.  0.  0.  0.  0.  1.]::Array{Float64,2}

ia=6::Int64

js=[9.  13.  14.  17.  18.  20.]::Array{Float64,2}

(aaJulia,iaJulia,jsJulia)=buildA!(hForA,qCols,neq)
isapprox(aaJulia,aa,rtol=0.1e-16::Float64,atol=0.0::Float64) &&
isapprox(iaJulia,ia,rtol=0.1e-16::Float64,atol=0.0::Float64)&&
isapprox(jsJulia,js,rtol=0.1e-16::Float64,atol=0.0::Float64)
end;

# test buildA! example7 example
function example7()::Bool


neq=4::Int64;nlag=1::Int64;nlead=1::Int64
qRows=(neq*nlead)::Int64;qCols=(neq*(nlag+nlead))::Int64


qq=zeros(Float64,4,8)

hForA=[0.  0.  0.  0.  1.  0.  0.  1.  -1.  -1.  0.  0.;
0.  0.  0.  0.  -0.3  1.  0.  0.  0.  -0.99  0.  0.;
0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  1.  -1.;
0.  0.  0.  0.  0.  0.  0.  -0.66  0.  -1.1  0.  1.]::Array{Float64,2}

aa=[1.30303  -1.0101  1.;
-0.30303  1.0101  0.;
-0.333333  1.11111  0.66]::Array{Float64,2}

ia=3::Int64

js=[5.  6.  8.]::Array{Float64,2}

(aaJulia,iaJulia,jsJulia)=buildA!(hForA,qCols,neq)
isapprox(aaJulia,aa,rtol=0.1e-16::Float64,atol=0.0::Float64) &&
isapprox(iaJulia,ia,rtol=0.1e-16::Float64,atol=0.0::Float64)&&
isapprox(jsJulia,js,rtol=0.1e-16::Float64,atol=0.0::Float64)
end;

# test buildA! oneEquationNoLead example
function oneEquationNoLead()::Bool


neq=1::Int64;nlag=1::Int64;nlead=1::Int64
qRows=(neq*nlead)::Int64;qCols=(neq*(nlag+nlead))::Int64


qq=zeros(Float64,1,2)

hForA=[0.  2.  3.]::Array{Float64,2}

genJuliaMatInit[aa, -0.666667, Array{Float64,2}]

ia=1::Int64

genJuliaMatInit[js, 2., Array{Float64,2}]

(aaJulia,iaJulia,jsJulia)=buildA!(hForA,qCols,neq)
isapprox(aaJulia,aa,rtol=0.1e-16::Float64,atol=0.0::Float64) &&
isapprox(iaJulia,ia,rtol=0.1e-16::Float64,atol=0.0::Float64)&&
isapprox(jsJulia,js,rtol=0.1e-16::Float64,atol=0.0::Float64)
end;

# test buildA! reliablePaperExmpl example
function reliablePaperExmpl()::Bool


neq=5::Int64;nlag=1::Int64;nlead=1::Int64
qRows=(neq*nlead)::Int64;qCols=(neq*(nlag+nlead))::Int64


qq=zeros(Float64,5,10)

hForA=[0.  0.  0.  0.  0.  0.  0.  0.  -0.5  0.  0.  -1.  0.7  -0.5  1.;
0.  0.  0.  0.  0.  0.  0.  0.  1.  -0.5  0.  0.  0.  0.  -0.5;
0.  0.  0.  0.  0.  -1.  0.  1.  -0.4  0.  0.  0.  -0.9  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.]::Array{Float64,2}

aa=[0.  0.  0.  0.;
-1.11111  1.11111  -0.444444  0.;
-1.55556  1.55556  2.37778  -2.;
0.  0.  2.  -1.]::Array{Float64,2}

ia=4::Int64

js=[6.  8.  9.  10.]::Array{Float64,2}

(aaJulia,iaJulia,jsJulia)=buildA!(hForA,qCols,neq)
isapprox(aaJulia,aa,rtol=0.1e-16::Float64,atol=0.0::Float64) &&
isapprox(iaJulia,ia,rtol=0.1e-16::Float64,atol=0.0::Float64)&&
isapprox(jsJulia,js,rtol=0.1e-16::Float64,atol=0.0::Float64)
end;

# test buildA! athan example
function athan()::Bool


neq=9::Int64;nlag=1::Int64;nlead=1::Int64
qRows=(neq*nlead)::Int64;qCols=(neq*(nlag+nlead))::Int64


qq=zeros(Float64,9,18)

hForA=[-0.5  0.  0.  0.  0.  0.  0.  0.  0.  1.  -0.18  0.  0.  -1.  0.  0.  0.  0.  -0.5  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  -0.293  -0.764  0.293  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  -1.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -2.  -1.  1.  1.  0.  0.  2.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -0.911  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  -1.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.]::Array{Float64,2}

aa=[0.  1.  0.  0.  0.  0.  0.;
-1.  2.  -0.36  0.  0.  -2.  0.;
0.  0.293  0.764  -0.293  0.  0.  0.;
-2.  4.293  0.044  -0.293  -0.911  -4.  0.;
0.  0.  0.  0.  0.911  0.  0.;
0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  1.]::Array{Float64,2}

ia=7::Int64

js=[1.  10.  11.  12.  13.  14.  18.]::Array{Float64,2}

(aaJulia,iaJulia,jsJulia)=buildA!(hForA,qCols,neq)
isapprox(aaJulia,aa,rtol=0.1e-16::Float64,atol=0.0::Float64) &&
isapprox(iaJulia,ia,rtol=0.1e-16::Float64,atol=0.0::Float64)&&
isapprox(jsJulia,js,rtol=0.1e-16::Float64,atol=0.0::Float64)
end;

# test buildA! habitmod example
function habitmod()::Bool


neq=12::Int64;nlag=4::Int64;nlead=1::Int64
qRows=(neq*nlead)::Int64;qCols=(neq*(nlag+nlead))::Int64


qq=zeros(Float64,12,60)

hForA=[0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  -1.  -1.  0.  0.  3.45419  0.  0.  -0.74118  0.00208517  0.494116  -0.1149;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -0.88879  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.52802  0.  0.11279  0.031833  0.024734  0.  0.  0.  0.  0.  0.  0.  -0.71526  0.  0.042076  -0.22829  -0.012267  0.  0.  0.  0.  0.  0.  0.  0.22215  0.  -0.14172  0.26679  -0.11959  0.  0.  0.  0.  0.  0.  0.  -0.42308  0.  -0.61076  -0.10946  0.17172  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  -0.00011277;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.46436  0.  0.16131  0.02744  0.17087  0.  0.  0.  0.  0.  0.  0.  -1.3425  0.  0.16794  -0.35818  -0.09837  0.  0.  0.  0.  0.  0.  0.  1.06382  0.  -0.02255  0.51594  0.08949  0.  0.  0.  0.  0.  0.  0.  -0.46672  0.  -0.11369  -1.10657  -0.26021  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  -0.00141;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -0.23292  0.  0.08512  -0.04213  0.14149  0.  0.  0.  0.  0.  0.  0.  0.03313  0.  0.15223  0.01572  -0.34762  0.  0.  0.  0.  0.  0.  0.  0.70552  0.  -0.24697  0.21888  -0.07805  0.  0.  0.  0.  0.  0.  0.  -0.56316  0.  -0.08268  -0.16054  -0.68637  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  -0.00348;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  -41.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -1.  40.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -0.99853  0.  0.  0.  0.  0.  -0.00147  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -1.00083  0.  0.  0.  0.  0.  25.9459  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -0.00146853  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  -1.  0.  0.  0.  0.  0.  -0.99578  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -1.  0.  -0.99578  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  -1.  0.  0.  0.  -0.99578  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.]::Array{Float64,2}

aa=[0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.;
-0.155117  -0.0214875  -0.0117771  0.00589435  0.185738  0.00238782  0.0597264  -0.0268822  0.00412584  0.0149078  -0.0493113  0.0238367  -0.872076  0.88879  0.89334  0.100478  -0.103176  -3.54054  36.5013  1.42383  0.744321  -0.00209401  -0.49621  0.114628;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.88879  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.;
-0.52802  -0.11279  -0.031833  -0.024734  0.71526  -0.042076  0.22829  0.012267  -0.22215  0.14172  -0.26679  0.11959  0.42308  0.  0.61076  0.10946  -0.17172  0.  0.  0.  0.  0.  0.  0.00011277;
-0.46436  -0.16131  -0.02744  -0.17087  1.3425  -0.16794  0.35818  0.09837  -1.06382  0.02255  -0.51594  -0.08949  0.46672  0.  0.11369  1.10657  0.26021  0.  0.  0.  0.  0.  0.  0.00141;
0.23292  -0.08512  0.04213  -0.14149  -0.03313  -0.15223  -0.01572  0.34762  -0.70552  0.24697  -0.21888  0.07805  0.56316  0.  0.08268  0.16054  0.68637  0.  0.  0.  0.  0.  0.  0.00348;
0.005823  -0.002128  0.00105325  -0.00353725  -0.00082825  -0.00380575  -0.000393  0.0086905  -0.017638  0.00617425  -0.005472  0.00195125  0.014079  0.  0.002067  -0.0209865  0.0171593  1.025  0.  0.  0.  0.  0.  0.000087;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.99853  0.  0.  0.  0.  0.  0.00147  0.  0.  0.  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -681.515  0.  0.  0.  0.  0.  17667.9  680.953  0.  0.  0.  0.;
0.530258  0.113268  0.0319679  0.0248388  -0.718291  0.0422543  -0.229257  -0.012319  0.223091  -0.142321  0.267921  -0.120097  -0.424873  0.  0.39089  -0.109924  0.172448  0.  0.  0.  1.00424  0.  0.  -0.000113248;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  684.403  0.  0.  0.  0.  0.  -17742.8  -682.835  0.  1.00424  0.  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  -1.00276  0.  0.  0.  0.  0.  1.00276  0.  0.  0.  1.00424  0.;
0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.]::Array{Float64,2}

ia=24::Int64

js=[13.  15.  16.  17.  25.  27.  28.  29.  37.  39.  40.  41.  49.  50.  51.  52.  53.  54.  55.  56.  57.  58.  59.  60.]::Array{Float64,2}

(aaJulia,iaJulia,jsJulia)=buildA!(hForA,qCols,neq)
isapprox(aaJulia,aa,rtol=0.1e-16::Float64,atol=0.0::Float64) &&
isapprox(iaJulia,ia,rtol=0.1e-16::Float64,atol=0.0::Float64)&&
isapprox(jsJulia,js,rtol=0.1e-16::Float64,atol=0.0::Float64)
end;

end
